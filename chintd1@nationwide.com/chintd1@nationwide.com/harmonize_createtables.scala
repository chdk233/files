// Databricks notebook source

dbutils.widgets.removeAll()
dbutils.widgets.dropdown("environment", "dev", Seq("dev", "test","prod"), "environment")
val environment=dbutils.widgets.get("environment").toString.toLowerCase

println("environment is "+environment)

// COMMAND ----------


val account_id= environment match {
  case "dev"  => "786994105833"
  case "test"  => "168341759447"
  case "prod"  => "785562577411"
}

// COMMAND ----------

spark.sql(s""" CREATE DATABASE  IF NOT EXISTS dhf_iot_harmonized_${environment} LOCATION 's3://pcds-databricks-common-${account_id}/iot/delta/harmonized/dhf_iot_harmonized_${environment}';""")

// COMMAND ----------

//Harmonize tables 

spark.sql(s""" CREATE TABLE  IF NOT EXISTS dhf_iot_harmonized_${environment}.DEVICE (
		DEVICE_ID BIGINT NOT NULL,
		DEVICE_KEY STRING NOT NULL,
		ETL_ROW_EFF_DTS TIMESTAMP NOT NULL,
		ETL_ROW_EXP_DTS TIMESTAMP NOT NULL,
		ETL_CURR_ROW_FL STRING NOT NULL,
		ETL_ADD_DTS TIMESTAMP,
		ETL_LAST_UPDATE_DTS TIMESTAMP NOT NULL,
		SOURCE_SYSTEM STRING NOT NULL,
		DEVICE_IDENTIFIER_NB STRING,
		DEVICE_IDENTIFIER_TYPE_CD STRING NOT NULL,
		DEVICE_TYPE_CD STRING NOT NULL,
		SERIAL_NB STRING
	)
USING delta
LOCATION 's3://pcds-databricks-common-${account_id}/iot/delta/harmonized/dhf_iot_harmonized_${environment}/DEVICE';""")
//

spark.sql(s""" CREATE TABLE  IF NOT EXISTS dhf_iot_harmonized_${environment}.NON_TRIP_EVENT (
		NON_TRIP_EVENT_ID BIGINT NOT NULL,
		NON_TRIP_EVENT_KEY STRING NOT NULL,
		ETL_ROW_EFF_DTS TIMESTAMP NOT NULL ,
		ETL_ROW_EXP_DTS TIMESTAMP NOT NULL ,
		ETL_CURR_ROW_FL STRING NOT NULL,
		ETL_ADD_DTS TIMESTAMP,
		ETL_LAST_UPDATE_DTS TIMESTAMP NOT NULL,
		SOURCE_SYSTEM STRING NOT NULL,
		VEH_KEY STRING NOT NULL,
		DEVICE_KEY STRING NOT NULL,
		ACCELERATION_RT STRING,
		LATITUDE_NB STRING,
		LONGITUDE_NB STRING,
		HEADING_DEGREE_QTY STRING,
		EVENT_TYPE_CD STRING ,
		UTC_TS STRING,
        SPEED_RT STRING,
		EVENT_SEVERITY_CD STRING ,
		POL_NB STRING
	)
USING delta
LOCATION 's3://pcds-databricks-common-${account_id}/iot/delta/harmonized/dhf_iot_harmonized_${environment}/NON_TRIP_EVENT';""")

//

spark.sql(s"""CREATE TABLE  IF NOT EXISTS dhf_iot_harmonized_${environment}.VEHICLE (
		VEHICLE_ID BIGINT NOT NULL,
		VEHICLE_KEY STRING NOT NULL ,
		ETL_ROW_EFF_DTS TIMESTAMP NOT NULL ,
		ETL_ROW_EXP_DTS TIMESTAMP NOT NULL ,
		ETL_CURR_ROW_FL STRING NOT NULL ,
		ETL_ADD_DTS TIMESTAMP,
		ETL_LAST_UPDATE_DTS TIMESTAMP NOT NULL ,
		SOURCE_SYSTEM STRING NOT NULL,
		DETECTED_VIN_NB STRING,
		ENROLLED_VIN_NB STRING
	)
USING delta
LOCATION 's3://pcds-databricks-common-${account_id}/iot/delta/harmonized/dhf_iot_harmonized_${environment}/VEHICLE';""")

//

spark.sql(s"""CREATE TABLE  IF NOT EXISTS dhf_iot_harmonized_${environment}.TRIP_SUMMARY (
		TRIP_SUMMARY_ID BIGINT NOT NULL,
		TRIP_SUMMARY_KEY STRING NOT NULL,
		ETL_ROW_EFF_DTS TIMESTAMP NOT NULL ,
		ETL_ROW_EXP_DTS TIMESTAMP NOT NULL ,
		ETL_CURR_ROW_FL STRING NOT NULL,
		ETL_ADD_DTS TIMESTAMP,
		ETL_LAST_UPDATE_DTS TIMESTAMP NOT NULL,
		SOURCE_SYSTEM STRING NOT NULL,
		VEH_KEY STRING NOT NULL,
		DEVICE_KEY STRING NOT NULL,
		ACCELERATION_QUALITY_FL boolean,
		AVERAGE_HDOP_QTY STRING,
		AVERAGE_SPEED_RT STRING,
		DRIVING_DISTANCE_QTY STRING,
		FUEL_CONSUMPTION_QTY STRING,
		IDLING_SECOND_QTY BIGINT,
		MALFUNCTION_STATUS_FL boolean ,
		MAX_SPEED_RT STRING,
		MEASUREMENT_UNIT_CD STRING,
		POL_NB STRING,
		SOURCE_TRIP_ID STRING,
		TIME_ZONE_OFFSET_NB STRING	,
		TRIP_SECOND_QTY BIGINT,
		TRANSPORT_MODE_CD STRING,
		TRANSPORT_MODE_REASON_CD STRING ,
		TRIP_START_TS STRING,
		TRIP_END_TS STRING
	)
USING delta
LOCATION 's3://pcds-databricks-common-${account_id}/iot/delta/harmonized/dhf_iot_harmonized_${environment}/TRIP_SUMMARY';""")

//

spark.sql(s""" CREATE TABLE  IF NOT EXISTS dhf_iot_harmonized_${environment}.TRIP_POINT (
		TRIP_POINT_ID BIGINT NOT NULL,
		ETL_ROW_EFF_DTS TIMESTAMP NOT NULL ,
		ETL_ROW_EXP_DTS TIMESTAMP NOT NULL ,
		ETL_CURR_ROW_FL STRING NOT NULL,
		ETL_ADD_DTS TIMESTAMP,
		ETL_LAST_UPDATE_DTS TIMESTAMP NOT NULL,
		SOURCE_SYSTEM STRING NOT NULL,
		TRIP_SUMMARY_KEY STRING NOT NULL,
		ACCELERATION_RT STRING,
		LATITUDE_NB STRING,
		LONGITUDE_NB STRING,
		HEADING_DEGREES_QTY BIGINT,
		UTC_TS STRING,
        SPEED_RT STRING,
		ACCELEROMETER_DATA_RT STRING,
		AMBIENT_TEMPERATURE_QTY BIGINT,
		BAROMETRIC_PRESSURE_QTY BIGINT,
		COOLANT_TEMPERATURE_QTY BIGINT,
		ENGINE_RPM_RT STRING,
		FUEL_LEVEL_QTY STRING,
		HDOP_QTY STRING,
		HORIZONTAL_ACCURACY_QTY STRING,
		THROTTLE_POSITION_NB BIGINT,
		VERTICAL_ACCURACY_QTY STRING
	)
USING delta
LOCATION 's3://pcds-databricks-common-${account_id}/iot/delta/harmonized/dhf_iot_harmonized_${environment}/TRIP_POINT';""")

//

spark.sql(s""" CREATE TABLE  IF NOT EXISTS dhf_iot_harmonized_${environment}.TRIP_EVENT (
		TRIP_EVENT_ID BIGINT NOT NULL,
		ETL_ROW_EFF_DTS TIMESTAMP NOT NULL ,
		ETL_ROW_EXP_DTS TIMESTAMP NOT NULL ,
		ETL_CURR_ROW_FL STRING NOT NULL,
		ETL_ADD_DTS TIMESTAMP,
		ETL_LAST_UPDATE_DTS TIMESTAMP NOT NULL,
		SOURCE_SYSTEM STRING NOT NULL,
		TRIP_SUMMARY_KEY STRING NOT NULL,
		ACCELERATION_RT STRING,
		AVG_SPEED_RT STRING,
		LATITUDE_NB STRING,
		LONGITUDE_NB STRING,
		DRIVING_SECOND_QTY BIGINT,
		EVENT_SEVERITY_CD STRING ,
		EVENT_TYPE_CD STRING ,
		UTC_TS STRING,
		SPEED_RT STRING,
		HEADING_DEGREES_QTY STRING
	)
USING delta
LOCATION 's3://pcds-databricks-common-${account_id}/iot/delta/harmonized/dhf_iot_harmonized_${environment}/TRIP_EVENT';""")